<html>
<body>
<script language="javascript"><!--
var items = []; // {name:"",tags:[]}
var tags = {}; //name: [parent_tag, parent_tag, ...]
var curPath = [];
var pathDict = {};
var showAll = true;

function removeTagParent(tag, parent){
    if (!tags[tag]){ return; }
    var removed = false;
    for (var i = 0; i < tags[tag].length; i++){
	if (tags[tag][i] == parent){
	    tags[tag].splice(i, 1);
	    removed = true;
	    break;
	}
    }
    if (!removed){ return; }
    showTagList();
    showItemList();
}

function addTagParent(tag){
    if (!tags[tag]){ return; }
    var parentBox = document.getElementById('newParentBox_' + tag);
    for (var i = 0; i < tags[tag].length; i++){
	if (tags[tag][i] == parentBox.value){ return; }
    }
    tags[tag].push(parentBox.value);
    tags[tag].sort();
    parentBox.value = "";
    showTagList();
    //alter curPath/pathDict if necessary
    showItemList();
}

function showTagList(){
    var t = document.getElementById('tagTable');
    while (t.rows.length > 1){ t.deleteRow(1); }

    var tagNames = [];
    for (var tag in tags){ tagNames.push(tag); }
    tagNames.sort();

    for (var i = 0; i < tagNames.length; i++){
	var row = t.insertRow(t.rows.length);
	var cell = row.insertCell(0);
	cell.style.verticalAlign = "top";
	cell.innerHTML = tagNames[i];
	cell = row.insertCell(1);
	var newHtml = "";
	var tagParents = {};
	for (var j = 0; j < tags[tagNames[i]].length; j++){
	    tagParents[tags[tagNames[i]][j]] = true;
	    newHtml += tags[tagNames[i]][j];
	    newHtml += " <input type=\"button\" onClick=\"removeTagParent('" + tagNames[i];
	    newHtml += "', '" + tags[tagNames[i]][j] + "')\" value=\"Remove\"><br>";
	}
	var potentialParents = [];
	for (var j = 0; j < tagNames.length; j++){
	    if ((!tagParents[tagNames[j]]) && (tagNames[j] != tagNames[i])){ potentialParents.push(tagNames[j]); }
	}
	if (potentialParents.length > 0){
	    newHtml += "<select id=\"newParentBox_" + tagNames[i] + "\">";
	    for (var j = 0; j < potentialParents.length; j++){
		newHtml += "<option value=\"" + potentialParents[j] + "\">" + potentialParents[j] + "</option>";
	    }
	    newHtml += "</select>";
	    newHtml += "<input type=\"button\" onClick=\"addTagParent('" + tagNames[i] + "')\" value=\"Add Parent\">";
	}
	if (!newHtml){ newHtml = "&nbsp;"; }
	cell.innerHTML = newHtml;
    }
}

function shouldShowItem(idx){
    var tagDict = {};
    for (var i = 0; i < items[idx].tags.length; i++){
	tagDict[items[idx].tags[i]] = true;
    }
    for (var i = 0; i < curPath.length; i++){
	if (!tagDict[curPath[i]]){ return false; }
    }
    return true;
}

function showPathBox(){
    var pathBox = document.getElementById('pathBox');
    var pathStr = "";
    for (var i = 0; i < curPath.length - 1; i++){
	pathStr += "/<a href=\"#\" onClick=\"popPath(" + (curPath.length - 1 - i) + "); return false;\">" + curPath[i] + "</a>";
    }
    if (curPath.length > 0){ pathStr += "/" + curPath[curPath.length - 1]; }
    else{ pathStr = "/"; }
    pathBox.innerHTML = "Path: " + pathStr;
}

function popPath(n){
    if (curPath.length <= 0){ return; }
    if (!n){ n = 1; }
    for (; n > 0; n--){
	delete pathDict[curPath.pop()];
    }
    showPathBox();
    showItemList();
}

function pushPath(tag){
    for (var i = 0; i < curPath.length; i++){
	if (curPath[i] == tag){ return; }
    }
    curPath.push(tag);
    pathDict[tag] = true;
    showPathBox();
    showItemList();
}

function showItemTags(idx){
    var t = document.getElementById('selTags');
    while (t.rows.length > 0){ t.deleteRow(0); }
    for (var i = 0; i < items[idx].tags.length; i++){
	var row = t.insertRow(t.rows.length);
	var cell = row.insertCell(0);
	cell.innerHTML = items[idx].tags[i];
	cell = row.insertCell(1);
	cell.innerHTML = "<input type=\"button\" onClick=\"removeTag(" + idx + ", " + i + ")\" value=\"Remove\">";
    }
    var row = t.insertRow(t.rows.length);
    var cell = row.insertCell(0);
    cell.innerHTML = "<input id=\"newTagBox\">";
    cell = row.insertCell(1);
    cell.innerHTML = "<input type=\"button\" onClick=\"addTag(" + idx + ")\" value=\"Add\">";
}

function removeTag(itemIdx, tagIdx){
    if ((itemIdx < 0) || (itemIdx >= items.length) || (tagIdx < 0) || (tagIdx >= items[itemIdx].tags.length)){ return; }
    var tagToRemove = items[itemIdx].tags[tagIdx];
    items[itemIdx].tags.splice(tagIdx, 1);
    var tagExists = false;
    for (var i = 0; i < items.length; i++){
	for (var j = 0; j < items[i].tags.length; j++){
	    if (items[i].tags[j] == tagToRemove){
		tagExists = true;
		break;
	    }
	}
	if (tagExists){ break; }
    }
    if (!tagExists){
	delete tags[tagToRemove];
	for (var t in tags){
	    for (var i = 0; i < tags[t].length; i++){
		if (tags[t][i] == tagToRemove){
		    tags[t].splice(i, 1);
		    break;
		}
	    }
	}
	showTagList();
	var tagPathIdx = curPath.indexOf(tagToRemove);
	if (tagPathIdx >= 0){
	    curPath = curPath.slice(0, tagPathIdx);
	    pathDict = {};
	    for (var i = 0; i < curPath.length; i++){ pathDict[curPath[i]] = true; }
	    showPathBox();
	}
    }
    showItemTags(itemIdx);
    showItemList();
}

function addTag(idx){
    if ((idx < 0) || (idx >= items.length)){ return; }
    var newTagBox = document.getElementById('newTagBox');
    for (var i = 0; i < items[idx].tags.length; i++){
	if (items[idx].tags[i] == newTagBox.value){
	    newTagBox.value = "";
	    return;
	}
    }
    items[idx].tags.push(newTagBox.value);
    if (!tags[newTagBox.value]){
	tags[newTagBox.value] = [];
	showTagList();
    }
    newTagBox.value = "";
    items[idx].tags.sort();
    showItemTags(idx);
    showItemList();
}

//function to delete item

function showItem(idx){
    if ((idx < 0) || (idx >= items.length)){ return; }
    document.getElementById('selIndex').innerHTML = "" + idx;
    document.getElementById('selName').innerHTML = items[idx].name;
    showItemTags(idx);
    //interface to delete item
}

function showItemList(){
    var t = document.getElementById('itemTable');
    while (t.rows.length > 0){ t.deleteRow(0); }

    var itemsToShow = [];
    var tagsDict = {};
    for (var i = 0; i < items.length; i++){
	if (!shouldShowItem(i)){ continue; }
	itemsToShow.push(i);
	for (var j = 0; j < items[i].tags.length; j++){
	    if ((tagsDict[items[i].tags[j]]) || (pathDict[items[i].tags[j]])){ continue; }
	    tagsDict[items[i].tags[j]] = true;
	}
    }
    var tagsToShow = [];
    for (var tag in tagsDict){ tagsToShow.push(tag); }
    tagsToShow.sort();

    if (curPath.length > 0){
	var row = t.insertRow(t.rows.length);
	var cell = row.insertCell(0);
	cell.innerHTML = "&nbsp;"
	cell = row.insertCell(1);
	cell.innerHTML = "<a href=\"#\" onClick=\"popPath(); return false;\">..</a>";
    }

    for (var i = 0; i < tagsToShow.length; i++){
	if ((!showAll) && (tags[tagsToShow[i]].length > 0)){
	    var showIt = false;
	    if (curPath.length > 0){
		for (var j = 0; j < tags[tagsToShow[i]].length; j++){
		    if (tags[tagsToShow[i]][j] == curPath[curPath.length - 1]){
			showIt = true;
			break;
		    }
		}
	    }
	    if (!showIt){ continue; }
	}
	var row = t.insertRow(t.rows.length);
	var cell = row.insertCell(0);
	cell.innerHTML = "Tag"
	cell = row.insertCell(1);
	cell.innerHTML = "<a href=\"#\" onClick=\"pushPath('" + tagsToShow[i] + "'); return false;\">" + tagsToShow[i] + "</a>";
    }

    for (var i = 0; i < itemsToShow.length; i++){
	if (!showAll){
	    var showIt = true;
	    for (var j = 0; j < items[itemsToShow[i]].tags.length; j++){
		if (!pathDict[items[itemsToShow[i]].tags[j]]){
		    showIt = false;
		    break;
		}
	    }
	    if (!showIt){ continue; }
	}
	var row = t.insertRow(t.rows.length);
	var cell = row.insertCell(0);
	cell.innerHTML = "Item"
	cell = row.insertCell(1);
	cell.innerHTML = "<a href=\"#\" onClick=\"showItem('" + itemsToShow[i] + "'); return false;\">" + items[itemsToShow[i]].name + "</a>";
    }
}

function toggleShowAll(){
    showAll = !showAll;
    var showAllBut = document.getElementById('showAllBut');
    showAllBut.value = (showAll ? "Only Show Direct Children" : "Show All Descendants");
    showItemList();
}

function addNewItem(){
    var itemNameBox = document.getElementById('newItemName')
    items.push({'name': itemNameBox.value, tags: []});
    itemNameBox.value = "";
    items.sort(function(x, y){
		    if (x.name < y.name){ return -1; }
		    if (x.name > y.name){ return 1; }
		    return 0;
		});
    if (curPath.length <= 0){
	showItemList();
    }
}
//--></script>
</body>
<table border="1" cols="3">
 <tr>
  <th>My Tags</th>
  <th>My Items</th>
  <th>Selected Item</th>
 </tr>
 <tr>
  <td valign="top">
   <table id="tagTable" border="1" cols="2">
    <tr><th>Tag</th><th>Child Of</th></tr>
   </table><br>
  </td>
  <td valign="top">
   <div id="pathBox">Path: /</div>
   <table id="itemTable" border="0" cols="2"></table><br>
   <input id="showAllBut" type="button" onClick="toggleShowAll()" value="Only Show Direct Children"><br>
  </td>
  <td valign="top">
   <table border="0" cols="2">
    <tr><td>Index:</td><td id="selIndex">&nbsp;</td></tr>
    <tr><td>Name:</td><td id="selName">&nbsp;</td></tr>
    <tr><td valign="top">Tags:</td><td><table id="selTags" border="0" cols="2"></table></td></tr>
   </table>
   <!--interface to delete item-->
  </td>
 </tr>
</table>
Add New Item: <input id="newItemName"> <input type="button" onClick="addNewItem()" value="Add"><br><br>
Notes (or "How the stuff above above would work if I weren't lazy"):
<ul>
 <li>"My Tags" should be a hierarchical view with support for drag-and-drop</li>
 <li>"My Items" should support drag-and-drop (of both items and tags)</li>
 <li>Moving an item into a tag would automatically tag it with that tag and every tag in the path</li>
 <li>
  Moving a tag into a tag would automatically tag all its descendants with that tag and every tag in the path<br>
  (corollary: because that doesn't happen in this demo, some items can become inaccessible when only showing direct children)
 </li>
</ul>
</html>
